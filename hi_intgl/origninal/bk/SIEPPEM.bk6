      
    
      
      PROGRAM SIEPPEM
          use param_mod
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/RIM_COEF/PI,DLT(3,3),CNU
      DIMENSION XP(3)
      ALLOCATABLE CD(:,:),LNDB(:,:),NSEL(:),XIS(:,:),VINT(:)
	  DATA NGR,NGL/-10,-10/  !If |NGR| or |NGL| is bigger than 10, must change subroutine GAUSSV
      type(params) :: par
      OPEN(5,FILE='sieppem.dat',STATUS='OLD')
      OPEN(7,FILE='SIEPPEM.OUT',STATUS='UNKNOWN')
      READ(5,*)NDIM,NTP,NBE,NODE,BETA,NF        ! Card set 1
      ALLOCATE(CD(NDIM,NTP),LNDB(NODE,NBE),NSEL(NBE),XIS(2,NBE),        &
     &         VINT(NF))
 !    Assign values to COMMON BLOCK variables
      DLT=RESHAPE((/1.,0.,0.,0.,1.,0.,0.,0.,1./),(/3,3/))
      PI=4.D0*DATAN(1.D0); CNU=0.3; TOLGP=1.D-14
      IF(NDIM.EQ.2) NGL=1
 !    Input nodal coordinates and element connectivity
      DO 10 IP=1,NTP
  10  READ(5,*)NP,(CD(I,NP),I=1,NDIM)                 ! Card set 2
      DO 20 IE=1,NBE
  20  READ(5,*)NE,(LNDB(ID,NE),ID=1,NODE),NSEL(NE)    ! Card set 3
      READ(5,*)(XP(I),I=1,NDIM)                       ! Card set 4  
	DO 30 IE=1,NBE
30    IF(NSEL(IE).LT.0) READ(5,*)(XIS(I,IE),I=1,NDIM-1)  ! Card set 5
      !--------------------------------------------------------------------
!      CALL NASTRAN_MESH(32,'BOUNDARY MESH AND INTERNAL POINTS',NDIM,    &
!     &                  NDIM-1,NTP,NBE,CD, LNDB,NODE,1,1)
      !--------------------------------------------------------------------
 !    Evaluate boundary integrals 
      par%ndim = ndim
      par%nbdm = ndim-1
      par%node = node
      par%beta = beta
      par%nf = nf
      par%xp = xp
      par%xip = xis(:,1)
      par%nnode = ntp
      par%nelem = NBE
      call par%pprint()

      !CALL RIM_ELEMS(NDIM,NODE,BETA,NBE,CD,LNDB,NSEL,XP,XIS,NGR,NGL,    &
     !&               TOLGP,NF,VINT)
       CALL RIM_ELEMS(par,CD,LNDB,NSEL,TOLGP,VINT)  
       write(*,*)'              Results :'
      !WRITE(*,'(1P,8(3E14.6/,6X))')(VINT(I),I=1,NF)
      !WRITE(7,'(1P,8(3E14.6/,6X))')(VINT(I),I=1,NF)
      write (*,'(8f14.8)') vint(1),vint(5),vint(2)&
                    ,vint(6),vint(3),vint(7),vint(4),vint(8)
      print *,sum(vint)
      DEALLOCATE (CD,LNDB,NSEL,XIS,VINT)
      STOP
      END

      !SUBROUTINE RIM_ELEMS(NDIM,NODE,BETA,NBE,CD,LNDB,NSEL,XP,XIS,      &
     !&                     NGR,NGL,TOLGP,NF,VINT)
       SUBROUTINE RIM_ELEMS(p,CD,LNDB,NSEL,TOLGP,VINT)

          use param_mod
          use matrix_mod
 IMPLICIT REAL*8 (A-H,O-Z)
      type(params) :: p
      DIMENSION CD(p%NDIM,*),LNDB(p%NODE,p%nelem),NSEL(p%nelem),VINT(p%NF),     &
     & CDL(18),NODEF(12),CP0(3),CK(3,p%NODE),     &
     &          V1E(p%NF)
      EXTERNAL INT_ELEM
      DATA CDL/-1.,-1.,1.,-1.,1.,1.,-1.,1.,0.,-1.,1.,0.,0.,1.,          &
     &         -1.,0.,0.,0./
      DATA NODEF/1,2,5, 2,3,6, 3,4,7, 4,1,8/,NPW/4/
      type(Matrix2D) :: mat
     
      IF(p%NDIM.EQ.2) p%NPOWG=(p%NODE/3)*2               ! 0,  2
      IF(p%NDIM.EQ.3) p%NPOWG=p%NODE/2+(p%NODE/9)*2        ! 2,  4,  6 
      !if (p%ndim.eq.3) then
          !p%npowg = 4
      !end if
      NSUB=2*p%NBDM
      NDSID=2+p%NODE/8
      CP0=0.
      VINT=0.
      DO 20 IE=1,p%nelem
      DO 10 ID=1,p%NODE
10    CK(1:p%NDIM,ID)=CD(1:p%NDIM,LNDB(ID,IE))
      call mat%init(ck)
      V1E=0.
      print *,"nsel",nsel(ie)
      IF(NSEL(IE).EQ.0) THEN    ! EVALUATE INTEGRAL OVER REGULAR ELEMENT
     !  CALL ADAPTINT_ELEM(NDIM,NBDM,NODE,BETA,CP0,XP,CK,CDL,NF,V1E,     &
     !&                    NGR,NGL,GPR,GWR,GPL,GWL,TOLGP,BETA,INT_ELEM)
      ELSE     ! EVALUATE INTEGRAL OVER SINGULAR ELEMENT
     print *," i am here"
       CALL SINGULAR_ELEM(p,CP0,CK,CDL,TOLGP,NODEF,NSUB,NDSID,NSEL(IE),NPW,V1E)
!       print *,NSEL
!       print *,XIS
      ENDIF
      VINT=VINT+V1E
20    CONTINUE
      !call p%pprint()
      !call mat%pprint()
      print *,nsel(1)
      END
    
    
    
    
      SUBROUTINE SINGULAR_ELEM(p,CP0,CK,CDL, &
     &                         TOLGP,NODEF,NSUB,NDSID,NSP,  &
     &                         NPW,V1E)
  !   THIS ROUTINE EVALUATES 2D AND 2D SINGULAR ELEMENT INTEGRALS
      use matrix_mod
      use param_mod
      IMPLICIT REAL*8 (A-H,O-Z)
      type(params) :: p
      DIMENSION CK(3,*),CDL(*),NODEF(*),CP0(*),XIQ(p%NBDM),CSUB(2,2),SHAP(p%NODE), &
     &          COEFG(0:p%NPOWG),COEFH(0:NPW),XI0(p%NBDM),KSB(4),V1E(p%NF),   &
     &          RINT(p%NF)
     


      TOL=1.D-5
      KSB=(/-2,1,2,-1/)
      
     call p%pprint()
      IF(NSP.LT.0) THEN
       CALL SHAPEF(p%NDIM,p%NODE,p%XIP,CK,CP0,p%XP,RQ2,CDL,SHAP)
       WRITE(*,*)' XP =',XP
      ENDIF
      print *,shap
      IF(NSP.GT.0) p%XP(1:NDIM)=CK(1:NDIM,NSP) 




      IF(NDIM.EQ.3) GOTO 30
  !   Evaluate 2D SINGULAR INTEGRALS
       !   Evaluate 3D SINGULAR INTEGRALS    
30    CALL GAUSSV(iabs(p%NGL),p%GPL,p%GWL)
        IF(NSP.GT.0) p%XIP=CDL(2*NSP-1:2*NSP)
      WFA=DSQRT(p%BETA*2.D0/3.D0+0.4D0)*DLOG(DABS(TOLGP)/2.D0)
      FK=3.D0/8.D0*(-10.D0*DBLE(iabs(p%NGL))/WFA-1.D0)**(4.D0/3.D0)
      DO 80 ISID=1,NSUB

      KS=KSB(ISID)
      IF(DABS(p%XIP(IABS(KS))-DBLE(KS)/DABS(DBLE(KS))).LT.TOL) GOTO 80  
      
  !   Set up a sub-element from side ISID and the singular point NSP
      DO ID=1,2; JD=NODEF(3*(ISID-1)+ID)
       CSUB(1:2,ID)=CDL(2*JD-1:2*JD)
      ENDDO
      IXI=1; IF(ISID/2*2.EQ.ISID) IXI=2; ISWP=3-IXI
      SV=DSIGN(1.D0,CSUB(IXI,2)-CSUB(IXI,1))
      VLc2=(CSUB(ISWP,2)-p%XIP(ISWP))**2
      XI0=CSUB(:,1)
      XIQ(ISWP)=XI0(ISWP)
      DO 60 ISUB=1,500
      RS=DSQRT(DOT_PRODUCT(XI0-p%XIP,XI0-p%XIP))
      IF(SV*XI0(IXI)+1.D-8.GE.SV*CSUB(IXI,2)) GOTO 80
      IF(SV*XI0(IXI).GE.SV*p%XIP(IXI)) THEN
       XIEL=FK*RS
      ELSE
       SUM=VLc2*(1.-FK*FK)+(p%XIP(IXI)-XI0(IXI))**2
       IF(SUM.LT.0.D0) THEN
        XIEL=SV*(p%XIP(IXI)-XI0(IXI))
       ELSE
        XIEL=FK*(FK*SV*(p%XIP(IXI)-XI0(IXI))-DSQRT(SUM))/(FK*FK-1.)
       ENDIF
      ENDIF
      IF(SV*(XI0(IXI)+SV*XIEL)+1.D-8.GT.SV*CSUB(IXI,2))                 &
     &   XIEL=SV*(CSUB(IXI,2)-XI0(IXI))
      FJCBL=0.5D0*SV*XIEL
      DO 40 IGL=1,iabs(p%NGL)
      XIQ(IXI)=XI0(IXI)+FJCBL*(1.D0+p%GPL(IGL))
      RHOQ=DSQRT(DOT_PRODUCT(XIQ-p%XIP,XIQ-p%XIP))
      DRDNP=DABS(XIQ(ISWP)-p%XIP(ISWP))/RHOQ
      CALL COEFS_GH(p,CDL,CK,XIQ,NPW,COEFG,COEFH)
      CALL INT_RHO(p,NPW,CDL,CK,CP0,XIQ,SHAP,COEFG,COEFH,RINT)
      COMT=DABS(FJCBL)*p%GWL(IGL)*DRDNP/RHOQ
  40  V1E=V1E+COMT*RINT
  60  XI0(IXI)=XI0(IXI)+SV*XIEL
  80  CONTINUE
      END

      SUBROUTINE INT_RHO(p,NPW,CDL,CK,CP0,XIQ,SHAP,COEFG,COEFH,RINT)      
          use param_mod
      IMPLICIT REAL*8 (A-H,O-Z)
      type(params) :: p
      DIMENSION XIQ(p%NBDM),CK(3,*),CDL(*),CP0(*),     &
     &          DRDX(p%NDIM),SLOP(p%NBDM),COSN(p%NDIM),SHAP(*),RI(p%NDIM),      &
     &          GCD(p%NDIM,p%NBDM),COEFG(0:p%NPOWG),COEFH(0:NPW),             &
     &          COEFB(0:11,p%NF),XI(p%NBDM),XQ(p%NDIM),RINT(p%NF),FQ(p%NF)
      SLOP=XIQ-p%XIP
      RHOQ=DSQRT(DOT_PRODUCT(SLOP,SLOP))
      SLOP=SLOP/RHOQ
      NPOWF=3+2.1214*RHOQ    ! NPOWF IS FROM 3 TO 9
      IF(NPOWF.LT.p%BETA-p%NBDM) NPOWF=p%BETA-p%NBDM
      !   DETERMINE COEFFICIENTS Bn
      XI=p%XIP+RHOQ*SLOP
      CALL COEF_B(p,p%NDIM,p%NBDM,p%NODE,p%BETA,p%NPOWG,NPOWF,p%NF,CDL,CK,p%XP,p%XIP,     &
     &            XI,SLOP,RHOQ,RI,COSN,GCD,COEFG,COEFB)
      !   EVALUATE RESULTS USING Eqs.(3-6-44) AND (3-6-63)
      BETA1=p%BETA-p%NBDM+1
      RINT=0.D0  
      DO 40 K=0,p%BETA-p%NDIM
      PW=p%BETA-K-p%NBDM
!       print *,"beta = ",beta
!       print *,"k = ",k
!       print *,"pw = ",pw
  40  RINT=RINT-(1.D0/RHOQ**PW-COEFH(INT(PW)))/PW*COEFB(K,:)
      NBETA=p%BETA-p%NBDM  
      IF(NBETA.GE.0) RINT=RINT+COEFB(NBETA,:)*DLOG(RHOQ/COEFH(0))

      DO K=p%BETA-p%NBDM+1,NPOWF
       PW=K-p%BETA+p%NBDM
       RINT=RINT+RHOQ**PW/PW*COEFB(K,:)
      ENDDO
      END




      SUBROUTINE COEFS_GH(p,CDL,CK,XIQ,  &
     &                    NPW,COEFG,COEFH)
      use param_mod
      IMPLICIT REAL*8 (A-H,O-Z)
      type(params) :: p 
      DIMENSION XIQ(p%NBDM),CK(3,*),COSN(p%NDIM),        &
     &          GCD(p%NDIM,p%NBDM),XI(p%NDIM),RI(p%NDIM),CDL(*),SHAP(p%NODE),     &
     &          COEFG(0:p%NPOWG),COEFC(0:NPW),COEFH(0:NPW)
      ! DETERMINE COEFFICIENTS Gn
      COEFG=0.D0
      CALL COEF_G(p,CDL,CK,XIQ, DRDN,COSN,    &
     &            GCD,RI,SHAP,COEFG)
      ! DETERMINE COEFFICIENTS Cn USING Eq. (3-6-37)
      COEFC(0)=DSQRT(COEFG(0))
      DO N=1,NPW
       COEFC(N)=0.D0
       DO I=1,N-1
        COEFC(N)=COEFC(N)-COEFC(I)*COEFC(N-I)     
       ENDDO
       IF(N.LE.NPOWG)COEFC(N)=COEFG(N)+COEFC(N)   ! Eq. (3-6-37)
       COEFC(N)=COEFC(N)/(2.D0*COEFC(0))
      ENDDO
      ! DETERMINE COEFFICIENTS Hi USING Eq.(3-6-47a)
      COEFC(1:NPW)=COEFC(1:NPW)/COEFC(0)    ! Eq.(3-6-47b)
      COEFH(0)=1.D0/COEFC(0)
      COEFH(1)=COEFC(1)
      COEFH(2)=2.*COEFC(2)-COEFC(1)*COEFC(1)
      COEFH(3)=3.*COEFC(3)-3.*COEFC(1)*COEFC(2)+COEFC(1)**3
      COEFH(4)=4.*COEFC(4)+4.*COEFC(1)*COEFC(1)*COEFC(2)                &
     &        -4.*COEFC(1)*COEFC(3)-2.*COEFC(2)*COEFC(2)                &
     &        -COEFC(1)**4
      END

      SUBROUTINE COEF_G(p,CDL,CK,XIQ,DRDN,COSN,GCD,RI,SHAP,COEFG)
      ! THIS ROUTINE DETERMINES COEFFICIENTS Gm USING Eqs.(3-6-58)~(3-6-60)
      use param_mod
      IMPLICIT REAL*8 (A-H,O-Z)
      type(params) :: p
      DIMENSION XIQ(p%NBDM),CK(3,*),COSN(p%NDIM),        &
     &          GCD(p%NDIM,p%NBDM),XI(p%NDIM),SLOP(p%NBDM),RI(p%NDIM),CDL(*),     &
     &          SHAP(p%NODE),RMAT(p%NPOWG,p%NPOWG),COEFG(0:p%NPOWG)
      IF(p%NODE.EQ.2) THEN         ! Eq.(24)
       COEFG(0)=0.25*((CK(1,1)-CK(1,2))**2+(CK(2,1)-CK(2,2))**2)  
      ELSEIF(p%NODE.EQ.3) THEN             ! FORM Eq.(3-6-33)
       RI=CK(:,1)+CK(:,2)-2.*CK(:,3)     ! Xbar
       XI=CK(:,1)-CK(:,2)                ! X1i-X2i 
       XBAR2=RI(1)*RI(1)+RI(2)*RI(2)     ! Xbar^2
       XXBAR=XI(1)*RI(1)+XI(2)*RI(2)
       COEFG(0)=0.25*(XI(1)*XI(1)+XI(2)*XI(2))-XXBAR*p%XIP(1)             &
     &         +XBAR2*p%XIP(1)*p%XIP(1)
       COEFG(1)=(-0.5*XXBAR+XBAR2*p%XIP(1))*XIQ(1)
       COEFG(2)=0.25*XBAR2
      ELSE      ! QUADRILATERAL ELEMENTS
       SLOP=XIQ-p%XIP
       RHOQ=DSQRT(DOT_PRODUCT(SLOP,SLOP))
       SLOP=SLOP/RHOQ
       VK=RHOQ/DBLE(p%NPOWG)
       DO 20 IP=0,p%NPOWG
       RHO=VK*DBLE(IP)
       XI(1:p%NBDM)=p%XIP+RHO*SLOP
       CALL SHAPEF(p%NDIM,p%NODE,XI,CK,p%XP,RI,R2,CDL,SHAP)
       IF(IP.NE.0) GOTO 10
       CALL DSHAPE(p%NDIM,p%NBDM,p%NODE,XI,CK,COSN,FJCB,CDL,GCD)   !dX/dXI
       RI=MATMUL(GCD,SLOP); COEFG(0)=DOT_PRODUCT(RI,RI)  ! Eq.(3-6-58)
       GOTO 20
 10    COEFG(IP)=((DSQRT(R2)/RHO)**2-COEFG(0))/RHO     ! Eq.(3-6-60)
       RMAT(IP,1)=1.D0        ! Eq.(3-6-42)
       DO JP=2,p%NPOWG; RMAT(IP,JP)=RMAT(IP,JP-1)*RHO; ENDDO
 20    CONTINUE
       CALL INVSOLVR(p%NPOWG,p%NPOWG,RMAT,p%NPOWG,-1)       ! INVERSE MATRIX [R] IN Eq.(3-6-59)
       COEFG(1:p%NPOWG)=MATMUL(RMAT,COEFG(1:p%NPOWG))     ! SOLVING Eq.(3-6-59) FOR {G}
      ENDIF
      END

      SUBROUTINE COEF_B(p,NDIM,NBDM,NODE,BETA,NPOWG,NPOWF,NF,CDL,CK,      &
     &                  XP,XIP,XIQ,SLOP,RHOQ,RI,COSN,GCD,COEFG,COEFB)
        use param_mod
      IMPLICIT REAL*8 (A-H,O-Z)
      type(params) ::p

      DIMENSION XP(NDIM),CK(3,*),DRDX(NDIM),CDL(*),COSN(NDIM),          &
     &          GCD(NDIM,*),XIP(NBDM),XIQ(NBDM),XI(NBDM),SLOP(NBDM),    &
     &          RI(NDIM),X(NDIM),RMAT(NPOWF,NPOWF),COEFG(0:NPOWG),      &
     &          COEFB(0:11,NF),SHAP(NODE),FQ(NF),A(NDIM)
      VK=RHOQ/DBLE(NPOWF)
      DO 20 IP=0,NPOWF
      RHO=VK*DBLE(IP)
      XI=XIP+RHO*SLOP
      ROBAR=COEFG(0); DO M=1,NPOWG; ROBAR=ROBAR+COEFG(M)*RHO**M; ENDDO
      ROBAR=DSQRT(ROBAR)       ! Eq.(3-6-28)
      CALL SHAPEF(NDIM,NODE,XI,CK,XP,RI,R2,CDL,SHAP)
      R=DSQRT(R2); X=XP+RI
      CALL DSHAPE(NDIM,NBDM,NODE,XI,CK,COSN,FJCB,CDL,GCD)
      IF(RHO.GT.1.0D-10)THEN    
       DRDX=RI/R
      ELSE
       DO 10 I=1,NDIM; A(I)=0.D0
       DO 10 J=1,NBDM            
       A(I)=A(I)+GCD(I,J)*SLOP(J)
10     CONTINUE                  
       GM=DSQRT(DOT_PRODUCT(A,A))
       DRDX=A/GM                 ! Eq.(3-6-74)
      ENDIF 
      DRDN=DOT_PRODUCT(COSN,DRDX)
      CALL F_BAR(p,DRDX,COSN,R,DRDN,XI,SHAP,X,NF,FQ)
      COEFB(IP,:)=FQ*FJCB/ROBAR**BETA
      IF(IP.EQ.0) GOTO 20
      COEFB(IP,:)=(COEFB(IP,:)-COEFB(0,:))/RHO
      RMAT(IP,1)=1.D0
      DO JP=2,NPOWF; RMAT(IP,JP)=RMAT(IP,JP-1)*RHO; ENDDO
 20   CONTINUE
      CALL INVSOLVR(NPOWF,NPOWF,RMAT,NPOWF,-1)
      COEFB(1:NPOWF,:)=MATMUL(RMAT,COEFB(1:NPOWF,:))    ! Bk IN Eq.(3-6-62)
      END

      SUBROUTINE GAUSSV(NGAUS,GP,GW)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION GP(NGAUS),GW(NGAUS)
  !   NGAUS:  The number of Gauss integration points (from 2 to 10)
  !   GP:     The coordinates of Gauss points
  !   GW:     The weighting factors of Gauss points
      SELECT CASE(NGAUS)
      CASE(2); GP(1)=-0.57735026918962576451D0; GW(1)=1.0000000000000D0
      CASE(3); GP(1)=-0.77459666924148337704D0; GP(2)=0.0000000000000D0
       GW(1)=0.555555555555555555556D0; GW(2)=0.888888888888888888889D0
      CASE(4)
       GP(1)=-0.86113631159405257522D0; GP(2)=-0.33998104358485626480D0
       GW(1)=0.34785484513745385737D0;  GW(2)=0.65214515486254614263D0
      CASE(5)
       GP(1)=-0.90617984593866399280D0; GP(2)=-0.53846931010568309104D0
       GP(3)=0.00000000000000000000D0;  GW(1)=0.23692688505618908751D0
       GW(2)=0.47862867049936646804D0;  GW(3)=0.56888888888888888889D0
      CASE(6)
       GP(1)=-0.93246951420315202781D0; GP(2)=-0.66120938646626451366D0
       GP(3)=-0.23861918608319690863D0; GW(1)=0.17132449237917034504D0
       GW(2)=0.36076157304813860757D0;  GW(3)=0.46791393457269104739D0
      CASE(7)
       GP(1)=-0.94910791234275852453D0; GP(2)=-0.74153118559939443986D0
       GP(3)=-0.40584515137739716691D0; GP(4)=0.00000000000000000000D0
       GW(1)=0.12948496616886969327D0;  GW(2)=0.27970539148927666790D0
       GW(3)=0.38183005050511894495D0;  GW(4)=0.41795918367346938776D0
      CASE(8)
       GP(1)=-0.96028985649753623168D0; GP(2)=-0.79666647741362673959D0
       GP(3)=-0.52553240991632898582D0; GP(4)=-0.18343464249564980494D0
       GW(1)=0.10122853629037625915D0;  GW(2)=0.22238103445337447054D0
       GW(3)=0.31370664587788728734D0;  GW(4)=0.36268378337836198297D0
      CASE(9)
       GP(1)=-0.96816023950762608984D0; GP(2)=-0.83603110732663579430D0
       GP(3)=-0.61337143270059039731D0; GP(4)=-0.32425342340380892904D0
       GP(5)=0.00000000000000000000D0;  GW(1)=0.08127438836157441197D0
       GW(2)=0.18064816069485740406D0;  GW(3)=0.26061069640293546232D0
       GW(4)=0.31234707704000284007D0;  GW(5)=0.33023935500125976317D0
      CASE(10)
       GP(1)=-0.97390652851717172008D0; GP(2)=-0.86506336668898451073D0
       GP(3)=-0.67940956829902440623D0; GP(4)=-0.43339539412924719080D0
       GP(5)=-0.14887433898163121089D0; GW(1)=0.06667134430868813759D0
       GW(2)=0.14945134915058059315D0;  GW(3)=0.21908636251598204400D0
       GW(4)=0.26926671930999635509D0;  GW(5)=0.29552422471475287017D0
      END SELECT
      KGAUS=NGAUS/2; DO IGASH=1,KGAUS; JGASH=NGAUS+1-IGASH
      GP(JGASH)=-GP(IGASH); GW(JGASH)=GW(IGASH); ENDDO
      END 

      SUBROUTINE INVSOLVR(NROW,NCOL,A,N,INDIC)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION A(NROW,NCOL),W(N),IROW(N)
      EPS=1.D-8             ! The tolerance of the minimum pivot
      DO 40 K=1,N; KM1=K-1; PIVOT=0.D0
      DO 20 I=1,N; IF(K.EQ.1) GOTO 10
      DO ISCAN=1,KM1; IF(I.EQ.IROW(ISCAN)) GOTO 20; ENDDO
  10  IF(DABS(A(I,K)).LE.DABS(PIVOT)) GOTO 20
      PIVOT=A(I,K); IROW(K)=I
  20  CONTINUE
      IF(DABS(PIVOT).GT.EPS) GOTO 30; STOP 9999
  30  IROWK=IROW(K)
      A(IROWK,1:NCOL)=A(IROWK,1:NCOL)/PIVOT; A(IROWK,K)=1.D0/PIVOT
      DO 40 I=1,N; AIK=A(I,K); IF(I.EQ.IROWK) GOTO 40
      A(I,1:NCOL)=A(I,1:NCOL)-AIK*A(IROWK,1:NCOL); A(I,K)=-AIK/PIVOT
  40  CONTINUE
      IF(INDIC.LT.0) GOTO 60
      DO 50 IX=N+1,NCOL; W(1:N)=A(IROW(1:N),IX); DO 50 I=1,N
  50  A(I,IX)=W(I)
      IF(INDIC.GT.0) RETURN
  60  DO 70 J=1,N; W(1:N)=A(IROW(1:N),J); DO 70 I=1,N
  70  A(I,J)=W(I)
      DO 80 I=1,N; W(IROW(1:N))=A(I,1:N); DO 80 J=1,N
  80  A(I,J)=W(J)
      END

      SUBROUTINE SHAPEF(NDIM,NODE,X,CK,XP,RI,RQ2,C,SP)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION SP(NODE),CK(3,*),XP(*),RI(*),C(*),X(*)
      IF(NODE.GT.3) GOTO 4
  !                  2-noded line element
      SP(1)=0.5*(1.-X(1)); SP(2)=0.5*(1.+X(1))
      IF(NODE.EQ.2) GOTO 50
  !                  3-noded line element
      SP(1)=-X(1)*SP(1); SP(2)=X(1)*SP(2); SP(3)=1.-X(1)*X(1)
      GOTO 50
  !                  4-noded quadrilateral element
  4   DO I=1,4
       SP(I)=0.25*(1.+C(2*I-1)*X(1))*(1.+C(2*I)*X(2))
      ENDDO
      IF(NODE.EQ.8) THEN
  !                  8 noded-element (square element)
       DO 15 I=1,4; L=2*I-1; SP(I)=SP(I)*(C(L)*X(1)+C(L+1)*X(2)-1.D0)
       WL=C(L+8)*X(1)+C(L+9)*X(2)
  15   SP(I+4)=.5D0*(WL+1.D0)*(1.D0-(C(L+8)*X(2))**2-(C(L+9)*X(1))**2)
      ELSEIF(NODE.EQ.9) THEN
  !                  9 noded-element (square element)
       DO 20 I=1,4; L=2*I-1; SP(I)=SP(I)*C(L)*X(1)*C(L+1)*X(2)
       WL=C(L+8)*X(1)+C(L+9)*X(2)
  20   SP(I+4)=0.5D0*WL*(WL+1.D0)*(1.D0-(C(L+8)*X(2))**2-               &
     &                  (C(L+9)*X(1))**2)
       SP(9)=(1.D0-X(1)*X(1))*(1.D0-X(2)*X(2))
      ENDIF
  !                  Calculate r and its vector components
  50  RQ2=0.; DO 70 I=1,NDIM; RI(I)=-XP(I)
      DO ID=1,NODE; RI(I)=RI(I)+SP(ID)*CK(I,ID); ENDDO
  70  RQ2=RQ2+RI(I)*RI(I)
      END

      SUBROUTINE DSHAPE(NDIM,NBDM,NODE,X,CK,COSN,FJCB,C,GD)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION X(*),CK(3,*),DN(2,NODE),GD(3,*),COSN(*),C(*),GR(3)
      IF(NODE.GT.3) GOTO 5
      DN(1,1)=-0.5; DN(1,2)=0.5        ! 2-noded line element
      IF(NODE.EQ.2) GOTO 30
      DN(1,1)=-0.5*(1.-2.*X(1))        ! 3-noded line element
      DN(1,2)=0.5*(1.+2.*X(1)); DN(1,3)=-2.*X(1); GOTO 30
   5  DO 10 I=1,4; I0=2*(I-1)          ! 4-noded quadr. element
      DN(1,I)=0.25*C(I0+1)*(1.+C(I0+2)*X(2))
  10  DN(2,I)=0.25*C(I0+2)*(1.+C(I0+1)*X(1))
      IF(NODE.EQ.8) THEN
!                  8 noded-element (square element)
       DO 15 I=1,4; L=2*I-1; S=C(L)*X(1)+C(L+1)*X(2)-1.D0
       DN(1,I)=DN(1,I)*S+0.25D0*(1.D0+C(L)*X(1))*(1.D0+C(L+1)*X(2))*C(L)
       DN(2,I)=DN(2,I)*S+0.25D0*(1.D0+C(L)*X(1))*(1.D0+C(L+1)*X(2))*    &
     &                 C(L+1)
       S=1.D0+C(L+8)*X(1)+C(L+9)*X(2)      
       T=1.D0-(C(L+8)*X(2))**2-(C(L+9)*X(1))**2
       DN(1,I+4)=0.5D0*C(L+8)*T-C(L+9)*C(L+9)*X(1)*S
  15   DN(2,I+4)=0.5D0*C(L+9)*T-C(L+8)*C(L+8)*X(2)*S
      ELSEIF(NODE.EQ.9) THEN
  !                 9 noded-element (square element)
       DO 20 I=1,4; L=2*I-1
       DN(1,I)=DN(1,I)*C(L+1)*X(2)*(1.+2.D0*C(L)*X(1))
       DN(2,I)=DN(2,I)*C(L)*X(1)*(1.+2.D0*C(L+1)*X(2))
       S=C(L+8)*X(1)+C(L+9)*X(2)      
       SS=S*(1.D0+S)
       T=(1.D0-(C(L+8)*X(2))**2-(C(L+9)*X(1))**2)*(1.D0+2.D0*S)
       XI2=C(L+8)*C(L+8); ET2=C(L+9)*C(L+9)
       DN(1,I+4)=0.5D0*(C(L+8)*T-2.D0*ET2*X(1)*SS)
  20   DN(2,I+4)=0.5D0*(C(L+9)*T-2.D0*XI2*X(2)*SS)
       DN(1,9)=-2.D0*X(1)*(1.D0-X(2)*X(2))
       DN(2,9)=-2.D0*X(2)*(1.D0-X(1)*X(1))
      ENDIF
  30  DO 50 I=1,NDIM; DO 50 J=1,NBDM; GD(I,J)=0.; DO 50 ID=1,NODE
50    GD(I,J)=GD(I,J)+DN(J,ID)*CK(I,ID)
      IF(NDIM.EQ.NBDM) THEN
       GOTO (51,52,53),NDIM
  51   FJCB=DABS(GD(1,1))
       RETURN          ! For internal cell integral
  52   FJCB=GD(1,1)*GD(2,2)-GD(1,2)*GD(2,1)
       RETURN
  53   FJCB=GD(1,1)*(GD(2,2)*GD(3,3)-GD(3,2)*GD(2,3))                   &
     &     -GD(1,2)*(GD(2,1)*GD(3,3)-GD(3,1)*GD(2,3))+                  &
     &      GD(1,3)*(GD(2,1)*GD(3,2)-GD(2,2)*GD(3,1))
       RETURN
      ENDIF
      IF(NODE.GT.3) GOTO 60
      GR(1)=GD(2,1); GR(2)=-GD(1,1)             ! For 2D normals
      FJCB=DSQRT(DOT_PRODUCT(GD(1:NDIM,1),GD(1:NDIM,1))) ! LINE JACOBIAN
      GOTO 70
  60  GR(1)=GD(2,1)*GD(3,2)-GD(3,1)*GD(2,2)     ! For 3D normals
      GR(2)=GD(3,1)*GD(1,2)-GD(1,1)*GD(3,2)
      GR(3)=GD(1,1)*GD(2,2)-GD(2,1)*GD(1,2)
      FJCB=DSQRT(GR(1)*GR(1)+GR(2)*GR(2)+GR(3)*GR(3)) ! 3D JACOBIAN
  70  COSN(1:NDIM)=GR(1:NDIM)/FJCB              ! 2D and 3D Normal
      END
      
      SUBROUTINE F_BAR(p,DRDX,COSN,R,DRDN,XI,SHAP,XQ,NF,FB)
          use param_mod
      IMPLICIT REAL*8 (A-H,O-Z)
      type(params) :: p
      DIMENSION X(p%NDIM),XI(p%NBDM),DRDX(p%NDIM),COSN(p%NDIM),SHAP(*),&
     &          FB(p%NF),XQ(p%NDIM)
      COMMON/RIM_COEF/PI,DLT(3,3),CNU
      integer :: i
      real(8) :: tmp

!     COMPUTING Gij (The first example (2D))
!      FB(1)=-(1.-2.*DRDX(1)*DRDX(1))/(2.*PI)
!      FB(2)=2.*DRDX(1)*DRDX(2)/(2.*PI)
!      FB(3)=-(1.-2.*DRDX(2)*DRDX(2))/(2.*PI)


      tmp=-(3.*DRDX(3)*DRDN-COSN(3))/(4.*PI)    ! GUIG 4.2
!     CYLINDER SURFACE ELEMENT (The second example (3D))
      do i=1,p%nf
      FB(i)=tmp*SHAP(i)    ! GUIG 4.2
        end do

!        IF(R.GT.1.D-18) FB(1)=R*DLOG(R)
!        IF(R.LT.1.D-18) FB(1)=0.


!	  FB(1)=-DRDX(1)      ! Karami 4.3

!        FB(1)=DRDX(1)    
!        FB(2)=DRDX(2)    

!	  FB=DRDX

!!      FORM Tij OF 2D
!      CON=-1./(4.*PI*(1.-CNU)); PR2=1.-2.*CNU; N=0
!      DO I=1,NDIM; DO J=1,NDIM; N=N+1
!       FB(N)=CON*(PR2*(COSN(I)*DRDX(J)-COSN(J)*DRDX(I))+               &
!     &           (PR2*DLT(I,J)+2*DRDX(I)*DRDX(J))*DRDN)
!      ENDDO; ENDDO
      
!     FORM Tij OF 3D
     ! NBDM=NDIM-1; PR1=1.-CNU; PR2=1.-2.*CNU
     ! CON=-1./(4.*NBDM*PI*PR1)
     ! N=0
     ! DO I=1,NDIM; DO J=1,NDIM
     !  N=N+1
     !  FB(N)=CON*(DRDN*(PR2*DLT(I,J)+NDIM*DRDX(I)*DRDX(J))-             &
     !& PR2*(DRDX(I)*COSN(J)-DRDX(J)*COSN(I)))
     ! ENDDO; ENDDO

!      FB(1)=DRDX(2)    ! Karami 4.1
!     FB(1)=1.D0  ! GUIG 4.1


!      FB(1)=DRDX(1)  ! KARAMI3

!       FB(1)=(1-2.*DRDX(1)**2)
!       FB(2)=(1-2.*DRDX(2)**2)

!     COMPUTING Gij
!      FB(1)=(1.-2.*DRDX(1)*DRDX(1))/(2.*PI)
!      FB(2)=-2.*DRDX(1)*DRDX(2)/(2.*PI)
!      FB(3)=(1.-2.*DRDX(2)*DRDX(2))/(2.*PI)

!     COMPUTING Uijk
!      CON=1./(4.*PI*(1.-CNU)); PR2=1.-2.*CNU
!      PHI2=SHAP(3)        
!      FB(1)=CON*PHI2*(PR2*DRDX(1)+2.*DRDX(1)**3)
!      FB(2)=CON*PHI2*(PR2*DRDX(1)+2.*DRDX(1)*DRDX(2)**2)
!      FB(3)=CON*PHI2*(PR2*DRDX(2)+2.*DRDX(2)**3)

!     COMPUTING Tijk 
!      E=1.; G=E/(2.*(1.+CNU)); CON=G/(2.*PI*(1.-CNU))
!      C=1.-2.*CNU; D=1.-4.*CNU; K=2
!      M=0; DO 10 I=1,NDIM; DO 10 J=I,NDIM; M=M+1
!      TEM=2.*DRDN*(C*DLT(I,J)*DRDX(K)+CNU*(DLT(I,K)*DRDX(J)+DLT(J,K)*DRDX(I))-   &
!     & 4.*DRDX(I)*DRDX(J)*DRDX(K))+2.*CNU*(COSN(I)*DRDX(J)*DRDX(K)+COSN(J)*DRDX(I)*       &
!     & DRDX(K))+C*(2.*COSN(K)*DRDX(I)*DRDX(J)+COSN(J)*DLT(I,K)+COSN(I)*          &
!     & DLT(J,K))-D*COSN(K)*DLT(I,J)
!      FB(M)=CON*TEM*SHAP(M)       
!  10  CONTINUE

      END
